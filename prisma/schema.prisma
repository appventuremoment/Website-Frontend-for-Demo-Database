generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  username String @db.VarChar(40)
  password String @db.VarChar(255)
  email    String @id @db.VarChar(255)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model external_company {
  company_name    String            @id @db.VarChar(255)
  industry        String?           @db.VarChar(100)
  contact_email   String?           @db.VarChar(255)
  external_mentor external_mentor[]
  project         project[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model external_mentor {
  email            String           @id @db.VarChar(255)
  honorific        String           @db.VarChar(3)
  surname          String           @db.VarChar(50)
  company_name     String           @db.VarChar(255)
  external_company external_company @relation(fields: [company_name], references: [company_name], onDelete: Cascade, map: "external_mentor_ibfk_1")
  project          project[]

  @@index([company_name], map: "company_name")
}

model project {
  internal_code    String            @id @db.Char(5)
  title            String            @db.VarChar(255)
  field_of_study   String?           @db.VarChar(100)
  taken            Boolean
  present_ready    Boolean
  poster_received  Boolean
  EMemail          String?           @db.VarChar(255)
  IMemail          String?           @db.VarChar(255)
  ecompany_name    String?           @db.VarChar(255)
  external_mentor  external_mentor?  @relation(fields: [EMemail], references: [email], onDelete: Cascade, map: "project_ibfk_1")
  internal_mentor  internal_mentor?  @relation(fields: [IMemail], references: [email], map: "project_ibfk_2")
  external_company external_company? @relation(fields: [ecompany_name], references: [company_name], onDelete: Cascade, map: "project_ibfk_3")
  publication      publication?
  ssef_project     ssef_project?
  student_project  student_project[]

  @@index([ecompany_name], map: "ecompany_name")
  @@index([EMemail], map: "EMemail")
  @@index([IMemail], map: "IMemail")
}

model publication {
  link             String    @id @db.VarChar(255)
  journal          String?   @db.VarChar(255)
  publisher        String?   @db.VarChar(255)
  publication_date DateTime? @db.Date
  pid              String    @unique(map: "pid") @db.Char(5)
  project          project   @relation(fields: [pid], references: [internal_code], onDelete: Cascade, map: "publication_ibfk_1")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model ssef_project {
  ssef_code       String  @id @db.Char(7)
  forms_received  Boolean
  poster_received Boolean
  result          String? @db.VarChar(13)
  pid             String  @unique(map: "pid") @db.Char(5)
  project         project @relation(fields: [pid], references: [internal_code], onDelete: Cascade, map: "ssef_project_ibfk_1")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model student {
  studentid       String            @id @db.Char(8)
  fname           String            @db.VarChar(50)
  lname           String            @db.VarChar(50)
  year_of_study   Int
  student_project student_project[]
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model student_project {
  studentid     String  @db.Char(8)
  internal_code String  @db.Char(5)
  student       student @relation(fields: [studentid], references: [studentid], onDelete: Cascade, map: "student_project_ibfk_1")
  project       project @relation(fields: [internal_code], references: [internal_code], onDelete: Cascade, map: "student_project_ibfk_2")

  @@id([studentid, internal_code])
  @@index([internal_code], map: "internal_code")
}

model internal_mentor {
  email        String    @id @db.VarChar(255)
  honorific    String    @db.VarChar(3)
  surname      String    @db.VarChar(50)
  subject_code String?   @db.Char(2)
  project      project[]
}
